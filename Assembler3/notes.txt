- Simple program with jsr.  a() returns 1
- now a(5).  a has j = i+1, return j
- register spilling: int a(int i, int j) { int k; k = (i+2)*(j-5); return k; }
- Pointers: a(int *p) { return *p }
- a(int *p) { int i; i = p[0]; i = p[5]; i = p[i]; }
- int a(int i) { int b[5]; return b[i]; }
- int *a(int p) { return &p; } 
- int a(int **arr, int i, int j) { return a[i][j]; }  - have to spill

Finally:

main()
{
  int *a, a2[3], i;

  i = 6;
  a = &i;
  a2[1] = i+2;
  *a = 200;
  *(a2+2) = i+5;
}

i will be [fp].
a2[0], a2[1] and a2[2] will be [fp-12], [fp-8] and [fp-4].
a will be [fp-16].
Note that this means:
&i will be fp.
a2 will be fp-12.
*a will be [[fp-12]]. Note, you can't really do that in assembler. 
      Instead you will load [fp-12] into a register and dereference that register.
a2+2 will be fp-4. Remember -- that's pointer arithmetic.

Should put that in jas.

Finally -- p3.c

And the icky main.
